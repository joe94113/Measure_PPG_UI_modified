<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <!--
      Licensed to the Apache Software Foundation (ASF) under one or more
      contributor license agreements.  See the NOTICE file distributed with
      this work for additional information regarding copyright ownership.
      The ASF licenses this file to You under the Apache License, Version 2.0
      (the "License"); you may not use this file except in compliance with
      the License.  You may obtain a copy of the License at
      
      http://www.apache.org/licenses/LICENSE-2.0
      
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
  -->
  
  <properties>
    <title>IIRJ -- IIR Filters</title>
  </properties>
  <body>
    <section name="Introduction">
      <p>
        This is package provides a selection of standard IIR filters such as Bessel, Butterworth and Chebyshev.
	The filters are designed on the basis of analogue lowpass filters and transformed with the z-transform
	to the digital space into a chain of 2nd order biquads.
      </p>
    </section>
    <section name="Usage">
      <subsection name="Setup">In general one needs two commands to set up the filter:
	<ol>
	  <li>Constructor call which defines the type of the filter, for example:
	  <source>Butterworth butterworth = new Butterworth();</source>
	  </li>
	  <li>Call of the method which creates the desired filter response, for example:
	  <source>butterworth.bandPass(order, Samplingfreq, Center freq, Width in frequ);</source>
	  The filter order represents the number of poles, the 2nd argument is always the
	  sampling frequency and the remaining parameters define the cutoff, center, width
	  and other factors requied for the specific filter.</li>
	  <li>The filter topology can be selected as an optional parameter which can be:
	  <ul><li>DirectFormAbstract.DIRECT_FORM_I</li><li>DirectFormAbstract.DIRECT_FORM_II.</li></ul></li>
	</ol>
      </subsection>
      <subsection name="Filtering">
	Filtering of the signal is sample by sample so that realtime processing is possible, for example: <source>outsample = butterworth.filter(insample)</source>
      </subsection>
    </section>
    <section name="Butterworth">
      <p>This is the <a href="https://en.wikipedia.org/wiki/Butterworth_filter">Butterworth filter</a> available as low-,
      high-, bandpass and stopband filter. This filter has a maximally flat response in the passband but is not linear
      phase.</p>

      <h4>Setup</h4>
      <source>Butterworth butterworth = new Butterworth()</source>

      <h4>Lowpass</h4>
      <source>butterworth.lowPass(filter order, Sampling frequency,Cutoff frequency [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the lowpass filter in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

      <h4>Highpass</h4>
      <source>butterworth.highPass(filter order, Sampling frequency,Cutoff frequency [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the highpass filter in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

      <h4>Bandpass</h4>
      <source>butterworth.bandPass(filter order, Sampling frequency,Center frequency, Width [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the bandpass in Hz</li>
	<li>width: the width of the bandpass in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

      <h4>Bandstop</h4>
      <source>butterworth.bandStop(filter order, Sampling frequency,Center frequency, Width [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the bandstop in Hz</li>
	<li>width: the width of the bandstop in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

    </section>
    <section name="Bessel">
      <p>This is the <a
      href="https://en.wikipedia.org/wiki/Bessel_filter">Bessel
      filter</a> available as low-, high-, bandpass and stopband
      filter. This filter has a maximally linear phase response in the passband
      but has a very slow rolloff.</p>
      <h4>Setup</h4>
      <source>Bessel bessel = new Bessel()</source>
      <h4>Lowpass</h4>
      <source>bessel.lowPass(filter order, Sampling frequency,Cutoff frequency [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the lowpass filter in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

      <h4>Highpass</h4>
      <source>bessel.highPass(filter order, Sampling frequency,Cutoff frequency [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the highpass filter in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

      <h4>Bandpass</h4>
      <source>bessel.bandPass(filter order, Sampling frequency,Center frequency, Width [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the bandpass in Hz</li>
	<li>width: the width of the bandpass in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>
      
      <h4>Bandstop</h4>
      <source>bessel.bandStop(filter order, Sampling frequency,Center frequency, Width [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the stopband filter in Hz</li>
	<li>width: the width of the stopband filter in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

    </section>
    
    <section name="ChebyshevI">
      <p>This is the <a
      href="https://en.wikipedia.org/wiki/Chebyshev_filter">Chebyshev
      type I</a> filter available as low-, high-, bandpass and
      stopband filter. This filter has ripples in the passband. In
      addition to the standard parameters one needs to specify the
      allowed ripple in the passband in debcibel.</p>
      <h4>Setup</h4>
      <source>ChebyshevI chebyshevI = new ChebyshevI()</source>
      <h4>Lowpass</h4>
      <source>chebyshevI.lowPass(filter order, Sampling frequency,Cutoff frequency, ripple in DB [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the lowpass filter in Hz</li>
	<li>ripple in DB: sets the allowed ripples in the passband.</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>
      
      <h4>Highpass</h4>
      <source>chebyshevI.highPass(filter order, Sampling frequency,Cutoff frequency, ripple in DB [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the highpass filter in Hz</li>
	<li>ripple in DB: sets the allowed ripples in the passband.</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

      <h4>Bandpass</h4>
      <source>chebyshevI.bandPass(filter order, Sampling frequency,Center frequency, Width, ripple in DB [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the bandpass in Hz</li>
	<li>width: the width of the bandpass in Hz</li>
	<li>ripple in DB: sets the allowed ripples in the passband.</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>
      
      <h4>Bandstop</h4>
      <source>chebyshevI.bandStop(filter order, Sampling frequency,Center frequency, Width, ripple in DB [,topology]);</source>
            <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the stopband filter in Hz</li>
	<li>width: the width of the stopband filter in Hz</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>
    </section>

    <section name="ChebyshevII">
      <p>This is the <a href="https://en.wikipedia.org/wiki/Chebyshev_filter">Chebyshev type II</a> filter available as low-, high-, bandpass and stopband filter. In addition
      to the standard parameters one needs to specify the allowed ripple in the stopband in debcibel.</p>
      <h4>Setup</h4>
      <source>ChebyshevII chebyshevII = new ChebyshevII()</source>
      <h4>Lowpass</h4>
      <source>chebyshevII.lowPass(filter order, Sampling frequency,Cutoff frequency, ripple in DB [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the lowpass filter in Hz</li>
	<li>ripple in DB: sets the allowed ripples in the stopband.</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>
      
      <h4>Highpass</h4>
      <source>chebyshevII.highPass(filter order, Sampling frequency,Cutoff frequency, ripple in DB [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>cutoff frequency: the cutoff frequency of the highpass filter in Hz</li>
	<li>ripple in DB: sets the allowed ripples in the stopband.</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>

      <h4>Bandpass</h4>
      <source>chebyshevII.bandPass(filter order, Sampling frequency,Center frequency, Width, ripple in DB [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the bandpass in Hz</li>
	<li>width: the width of the bandpass in Hz</li>
	<li>ripple in DB: sets the allowed ripples in the stopband.</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>
     
      
      <h4>Bandstop</h4>
      <source>chebyshevII.bandStop(filter order, Sampling frequency,Center frequency, Width, ripple in DB [,topology]);</source>
      <ul>
	<li>filter order: number of poles or filter order / 2 = number of 2nd order filter stages</li>
	<li>sampling frequency: the sampling frequency in Hz of the incoming samples.</li>
	<li>center frequency: the center frequency of the bandpass in Hz</li>
	<li>width: the width of the bandstop in Hz</li>
	<li>ripple in DB: sets the allowed ripples in the stopband.</li>
	<li>topology: the topology of the 2nd order biquad filters. Default is type II.</li>
      </ul>
     
      
    </section>
  </body>
</document>
